#include <mbed.h>
#include "MQTTNetwork.h"
#include "MQTTmbed.h"
#include "MQTTClient.h"
#include <MQTTClientMbedOs.h>

#include "stm32l475e_iot01_tsensor.h"
#include "stm32l475e_iot01_hsensor.h"
 
DigitalOut led(LED1);
InterruptIn button(USER_BUTTON);
Thread t;
EventQueue queue(5 * EVENTS_EVENT_SIZE);
Serial pc(USBTX, USBRX);
WiFiInterface *wifi;

int sensor_value_temp = 0;
int sensor_value_hum = 0;
int arrivedcount = 0;
void messageArrived(MQTT::MessageData& md)
{
    MQTT::Message &message = md.message;
    pc.printf("Message arrived: qos %d, retained %d, dup %d, packetid %d\r\n", message.qos, message.retained, message.dup, message.id);
    pc.printf("Payload %.*s\r\n", message.payloadlen, (char*)message.payload);
    ++arrivedcount;
}


const char *sec2str(nsapi_security_t sec)
{
    switch (sec) {
        case NSAPI_SECURITY_NONE:
            return "None";
        case NSAPI_SECURITY_WEP:
            return "WEP";
        case NSAPI_SECURITY_WPA:
            return "WPA";
        case NSAPI_SECURITY_WPA2:
            return "WPA2";
        case NSAPI_SECURITY_WPA_WPA2:
            return "WPA/WPA2";
        case NSAPI_SECURITY_UNKNOWN:
        default:
            return "Unknown";
    }
}
void read_temp(){
    // float sensor_value = 0;
    pc.printf("Start sensor init\n");
 
    BSP_TSENSOR_Init();
    BSP_HSENSOR_Init();

        // pc.printf("\nNew loop, LED1 should blink during sensor read\n");

         sensor_value_temp = BSP_TSENSOR_ReadTemp();
        // pc.printf("\nTEMPERATURE = %.2f degC\n", sensor_value);
         sensor_value_hum = BSP_HSENSOR_ReadHumidity();
        // pc.printf("HUMIDITY    = %.2f %%\n", sensor_value);



 
//     while(1) {
//         // pc.printf("\nNew loop, LED1 should blink during sensor read\n");
//          led = 1;
//          sensor_value_temp = BSP_TSENSOR_ReadTemp();
//         // pc.printf("\nTEMPERATURE = %.2f degC\n", sensor_value);
//          sensor_value_hum = BSP_HSENSOR_ReadHumidity();
//         // pc.printf("HUMIDITY    = %.2f %%\n", sensor_value);
//         led = 0;
//          ThisThread::sleep_for(1000);
// }
}



void pressed_handler() {
    int count;
    read_temp();

    pc.printf("\nConnecting to %s...\n", MBED_CONF_APP_WIFI_SSID);
    int ret = wifi->connect(MBED_CONF_APP_WIFI_SSID, MBED_CONF_APP_WIFI_PASSWORD, NSAPI_SECURITY_WPA_WPA2);
    if (ret != 0) {
        pc.printf("\nConnection error: %d\n", ret);
        return;
    }

    pc.printf("Success\n\n");
    pc.printf("MAC: %s\n", wifi->get_mac_address());
    SocketAddress a;
    wifi->get_ip_address(&a);
    pc.printf("IP: %s\n", a.get_ip_address());
    wifi->get_netmask(&a);
    pc.printf("Netmask: %s\n", a.get_ip_address());
    wifi->get_gateway(&a);
    pc.printf("Gateway: %s\n", a.get_ip_address());
    pc.printf("RSSI: %d\n\n", wifi->get_rssi());
    pc.printf("\nDone\n");
	
	
	pc.printf("\nMQTT\n");
	float version = 0.6;
    char* topic = "@msg/ict710";
    pc.printf("HelloMQTT: version is %.2f\r\n", version);
    
	MQTTNetwork mqttNet(wifi);
	TCPSocket socket;
	
	MQTTClient client(&socket);
	socket.open(wifi);
 
    const char* hostname = "mqtt.netpie.io";
    int port = 1883;

    pc.printf("Connecting to %s:%d\r\n", hostname, port);
	int rc = socket.connect(hostname, port);
	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
	
    data.MQTTVersion = 3;
	
    data.clientID.cstring = "ef67ed77-152d-47db-ae40-3f2b82306c11";
    data.username.cstring = "4aihwqvxAJFJ6pqFi4VSFF4xh5KM4J3w";
	client.connect(data);
	MQTT::Message message;
    char buf[100];

    sprintf(buf,"  and hum  %f\r\n", sensor_value_hum);
    // sprintf(buf, "temp   %f\r\n", sensor_value_temp,"  and hum  %f\r\n", sensor_value_hum);
    message.qos = MQTT::QOS0;
    message.retained = false;
    message.dup = false;
    message.payload = (void*)buf;
    message.payloadlen = strlen(buf)+1;
    rc = client.publish(topic, message);
	pc.printf("QoS 0\n");

    // sprintf(buf, "Hello World!  QoS 1 message from app version %f\r\n", version);
    // message.qos = MQTT::QOS1;
    // message.payloadlen = strlen(buf)+1;
    // rc = client.publish(topic, message);
	// pc.printf("QoS 1\n");
    
    // sprintf(buf, "Hello World!  QoS 2 message from app version %f\r\n", version);
    // message.qos = MQTT::QOS2;
    // message.payloadlen = strlen(buf)+1;
    // rc = client.publish(topic, message);
	// pc.printf("QoS 2\n");
    // if ((rc = client.unsubscribe(topic)) != 0)
    //     pc.printf("rc from unsubscribe was %d\r\n", rc);
    // if ((rc = client.disconnect()) != 0)
    //     pc.printf("rc from disconnect was %d\r\n", rc);
    mqttNet.disconnect();
    pc.printf("Version %.2f: finish %d msgs\r\n", version, arrivedcount);
	// wifi->disconnect();
	
}


int main() {



    wifi = WiFiInterface::get_default_instance();
    if (!wifi) {
        printf("ERROR: No WiFiInterface found.\n");
        return -1;
    }
	
	
    t.start(callback(&queue, &EventQueue::dispatch_forever));
    button.fall(queue.event(pressed_handler));
    pc.printf("Starting\n");
    while(1) {
        led = !led;
        ThisThread::sleep_for(500);
    }
}